"""
CSV Processor cog for the Tower of Temptation PvP Statistics Discord Bot.

This cog provides:
1. Background task for downloading and processing CSV files from game servers
2. Commands for manually processing CSV files
3. Admin commands for managing CSV processing
"""
import asyncio
import logging
import os
import re
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Union, Tuple

import discord
from discord import app_commands
from discord.ext import commands, tasks

from utils.csv_parser import CSVParser
from utils.sftp import SFTPManager
from utils.embed_builder import EmbedBuilder
from utils.helpers import has_admin_permission
from utils.parser_utils import parser_coordinator, normalize_event_data, categorize_event
from utils.decorators import has_admin_permission as admin_permission_decorator, premium_tier_required
from models.guild import Guild
from models.server import Server
from utils.discord_utils import server_id_autocomplete  # Import standardized autocomplete function

logger = logging.getLogger(__name__)

class CSVProcessorCog(commands.Cog):
    """Commands and background tasks for processing CSV files"""
    
    def __init__(self, bot: commands.Bot):
        """Initialize the CSV processor cog
        
        Args:
            bot: Discord bot instance
        """
        self.bot = bot
        self.csv_parser = CSVParser()
        # Don't initialize SFTP manager here, we'll create instances as needed
        self.sftp_managers = {}  # Store SFTP managers by server_id
        self.processing_lock = asyncio.Lock()
        self.is_processing = False
        self.last_processed = {}  # Track last processed timestamp per server
        
        # Create task loop
        self.process_csv_files_task = tasks.loop(minutes=5.0)(self.process_csv_files_task)
        # Before loop hook
        self.process_csv_files_task.before_loop(self.before_process_csv_files_task)
        # Start background task
        self.process_csv_files_task.start()
    
    def cog_unload(self):
        """Stop background tasks and close connections when cog is unloaded"""
        if hasattr(self.process_csv_files_task, 'cancel'):
            self.process_csv_files_task.cancel()
        
        # Close all SFTP connections
        for server_id, sftp_manager in self.sftp_managers.items():
            try:
                asyncio.create_task(sftp_manager.disconnect())
            except Exception as e:
                logger.error(f"Error disconnecting SFTP for server {server_id}: {e}")
    
    async def process_csv_files_task(self):
        """Background task for processing CSV files
        
        This task runs every 5 minutes and checks for new CSV files on all configured servers.
        """
        if self.is_processing:
            logger.debug("Skipping CSV processing - already running")
            return
        
        self.is_processing = True
        
        try:
            # Get list of configured servers
            server_configs = await self._get_server_configs()
            
            # Skip processing if no SFTP-enabled servers are configured
            if not server_configs:
                logger.debug("No SFTP-enabled servers configured, skipping CSV processing")
                return
                
            for server_id, config in server_configs.items():
                try:
                    await self._process_server_csv_files(server_id, config)
                except Exception as e:
                    logger.error(f"Error processing CSV files for server {server_id}: {str(e)}")
        
        except Exception as e:
            logger.error(f"Error in CSV processing task: {str(e)}")
        
        finally:
            self.is_processing = False
    
    async def before_process_csv_files_task(self):
        """Wait for bot to be ready before starting task"""
        await self.bot.wait_until_ready()
        # Add a small delay to avoid startup issues
        await asyncio.sleep(10)
    
    async def _get_server_configs(self) -> Dict[str, Dict[str, Any]]:
        """Get configurations for all servers with SFTP enabled
        
        Returns:
            Dict: Dictionary of server IDs to server configurations
        """
        # Query database for server configurations with SFTP enabled
        server_configs = {}
        
        # Find all servers with SFTP enabled in the database
        try:
            servers_cursor = self.bot.db.servers.find({"sftp_enabled": True})
            async for server in servers_cursor:
                server_id = server.get("server_id")
                
                # Only add servers with complete SFTP configuration
                if server_id and all(key in server for key in ["sftp_host", "sftp_username", "sftp_password"]):
                    # The sftp_host might include the port in format "hostname:port"
                    sftp_host = server.get("sftp_host")
                    sftp_port = server.get("sftp_port", 22)  # Default to 22 if not specified
                    
                    # Split hostname and port if they're combined
                    if sftp_host and ":" in sftp_host:
                        hostname_parts = sftp_host.split(":")
                        sftp_host = hostname_parts[0]  # Extract just the hostname part
                        if len(hostname_parts) > 1 and hostname_parts[1].isdigit():
                            sftp_port = int(hostname_parts[1])  # Use the port from the combined string
                    
                    server_configs[server_id] = {
                        # Map database parameter names to what SFTPManager expects
                        "hostname": sftp_host,
                        "port": int(sftp_port),
                        "username": server.get("sftp_username"),
                        "password": server.get("sftp_password"),
                        # Keep additional parameters with original names
                        "sftp_path": server.get("sftp_path", "/logs"),
                        "csv_pattern": server.get("csv_pattern", r"\d{4}\.\d{2}\.\d{2}-\d{2}\.\d{2}\.\d{2}\.csv")
                    }
                    logger.info(f"Found configured SFTP server: {server_id}")
        except Exception as e:
            logger.error(f"Error retrieving server configurations: {e}")
        
        logger.info(f"Retrieved {len(server_configs)} SFTP-enabled server configurations")
        return server_configs
    
    async def _process_server_csv_files(self, server_id: str, config: Dict[str, Any]) -> Tuple[int, int]:
        """Process CSV files for a specific server
        
        Args:
            server_id: Server ID
            config: Server configuration
            
        Returns:
            Tuple[int, int]: Number of files processed and total death events processed
        """
        # Connect to SFTP server - use the correctly mapped parameters
        hostname = config["hostname"]  # Already mapped in _get_server_configs
        port = config["port"]          # Already mapped in _get_server_configs
        username = config["username"]  # Already mapped in _get_server_configs
        password = config["password"]  # Already mapped in _get_server_configs
        
        # Get last processed time or default to 24 hours ago
        last_time = self.last_processed.get(server_id, datetime.now() - timedelta(days=1))
        
        # Format for SFTP directory listing comparison
        last_time_str = last_time.strftime("%Y.%m.%d-%H.%M.%S")
        
        try:
            # Create a new SFTP client for this server if none exists
            if server_id not in self.sftp_managers:
                logger.info(f"Creating new SFTP manager for server {server_id}")
                # Create SFTPManager with the correct parameter mapping
                self.sftp_managers[server_id] = SFTPManager(
                    hostname=hostname,  # Map from sftp_host above
                    port=port,          # Map from sftp_port
                    username=username,  # Map from sftp_username
                    password=password,  # Map from sftp_password
                    server_id=server_id  # Pass server_id for better tracking
                )
            
            # Get the SFTP client for this server
            sftp = self.sftp_managers[server_id]
            
            # Check if there was a recent connection error
            if hasattr(sftp, 'last_error') and sftp.last_error and 'Auth failed' in sftp.last_error:
                logger.warning(f"Skipping SFTP operations for server {server_id} due to recent authentication failure")
                return 0, 0
            await sftp.connect()
            
            try:
                # Build the path to the correct directory: hostname_serverid/actual1/deathlogs/
                server_dir = f"{config.get('hostname', 'server').split(':')[0]}_{server_id}"
                deathlogs_path = os.path.join("/", server_dir, "actual1", "deathlogs")
                
                # Log the path we're searching in
                logger.info(f"Searching for CSV files in path: {deathlogs_path}")
                
                # Use list_files which is available in both SFTPClient and SFTPManager
                csv_pattern = config.get("csv_pattern", r".*\.csv$")
                csv_files = await sftp.list_files(deathlogs_path, csv_pattern)
                
                # Sort chronologically
                csv_files.sort()
                
                # Filter for files newer than last processed
                new_files = [f for f in csv_files if f > last_time_str]
                
                # Process each file
                files_processed = 0
                events_processed = 0
                
                for file in new_files:
                    try:
                        # Download file content - use the correct path
                        file_path = os.path.join(deathlogs_path, file)
                        logger.info(f"Downloading CSV file from: {file_path}")
                        content = await sftp.download_file(file_path)
                        
                        if content is not None:
                            # Process content
                            events = self.csv_parser.parse_csv_data(content.decode('utf-8'))
                            
                            # Normalize and deduplicate events
                            processed_count = 0
                            errors = []
                            
                            for event in events:
                                try:
                                    # Normalize event data
                                    normalized_event = normalize_event_data(event)
                                    
                                    # Add server ID
                                    normalized_event["server_id"] = server_id
                                    
                                    # Check if this is a duplicate event
                                    if parser_coordinator.is_duplicate_event(normalized_event):
                                        # Update timestamp in coordinator
                                        if "timestamp" in normalized_event and isinstance(normalized_event["timestamp"], datetime):
                                            parser_coordinator.update_csv_timestamp(server_id, normalized_event["timestamp"])
                                        
                                        # Process event based on type
                                        event_type = categorize_event(normalized_event)
                                        
                                        if event_type in ["kill", "suicide"]:
                                            # Process kill event
                                            await self._process_kill_event(normalized_event)
                                            processed_count += 1
                                    
                                except Exception as e:
                                    errors.append(str(e))
                            
                            processed = processed_count
                            
                            events_processed += processed
                            files_processed += 1
                            
                            if errors:
                                logger.warning(f"Errors processing {file}: {len(errors)} errors")
                            
                            # Update last processed time if this is the newest file
                            if file == new_files[-1]:
                                try:
                                    file_time = datetime.strptime(file.split('.csv')[0], "%Y.%m.%d-%H.%M.%S")
                                    self.last_processed[server_id] = file_time
                                except ValueError:
                                    # If we can't parse the timestamp from filename, use current time
                                    self.last_processed[server_id] = datetime.now()
                    
                    except Exception as e:
                        logger.error(f"Error processing file {file}: {str(e)}")
                
                return files_processed, events_processed
                
            finally:
                # Disconnect from the SFTP server
                await sftp.disconnect()
                
        except Exception as e:
            logger.error(f"SFTP error for server {server_id}: {str(e)}")
            return 0, 0
    
    @app_commands.command(name="process_csv")
    @app_commands.describe(
        server_id="The server ID to process CSV files for",
        hours="Number of hours to look back (default: 24)"
    )
    @app_commands.autocomplete(server_id=server_id_autocomplete)
    @admin_permission_decorator()
    @premium_tier_required(1)  # Require Survivor tier for CSV processing
    async def process_csv_command(
        self,
        interaction: discord.Interaction,
        server_id: Optional[str] = None,
        hours: Optional[int] = 24
    ):
        """Manually process CSV files from the game server
        
        Args:
            interaction: Discord interaction
            server_id: Server ID to process (optional)
            hours: Number of hours to look back (default: 24)
        """
        
        await interaction.response.defer(ephemeral=True)
        
        # Get server ID from guild config if not provided
        if not server_id:
            # Try to get the server ID from the guild's configuration
            try:
                guild_id = str(interaction.guild_id)
                guild_doc = await self.bot.db.guilds.find_one({"guild_id": guild_id})
                if guild_doc and "default_server_id" in guild_doc:
                    server_id = guild_doc["default_server_id"]
                    logger.info(f"Using default server ID from guild config: {server_id}")
                else:
                    # No default server configured
                    embed = EmbedBuilder.error(
                        title="No Server Configured",
                        description="No server ID provided and no default server configured for this guild."
                    )
                    await interaction.followup.send(embed=embed, ephemeral=True)
                    return
            except Exception as e:
                logger.error(f"Error getting default server ID: {e}")
                embed = EmbedBuilder.error(
                    title="Configuration Error",
                    description="An error occurred while retrieving the server configuration."
                )
                await interaction.followup.send(embed=embed, ephemeral=True)
                return
        
        # Get server config
        server_configs = await self._get_server_configs()
        
        if server_id not in server_configs:
            embed = EmbedBuilder.error(
                title="Server Not Found",
                description=f"No SFTP configuration found for server `{server_id}`."
            )
            await interaction.followup.send(embed=embed, ephemeral=True)
            return
        
        # Calculate lookback time
        # Ensure hours is a valid float value
        safe_hours = float(hours) if hours is not None else 24.0
        
        # Safely update last_processed dictionary with server_id
        if server_id is not None and isinstance(server_id, str):
            self.last_processed[server_id] = datetime.now() - timedelta(hours=safe_hours)
        else:
            logger.warning(f"Invalid server_id: {server_id}, not updating last_processed timestamp")
        
        # Process CSV files
        async with self.processing_lock:
            try:
                # Process files only if server_id exists in server_configs and it's a non-None string
                if server_id is not None and isinstance(server_id, str) and server_id in server_configs:
                    files_processed, events_processed = await self._process_server_csv_files(
                        server_id, server_configs[server_id]
                    )
                else:
                    logger.error(f"Invalid server_id: {server_id} or not found in server_configs")
                    files_processed, events_processed = 0, 0
                
                if files_processed > 0:
                    embed = EmbedBuilder.success(
                        title="CSV Processing Complete",
                        description=f"Processed {files_processed} file(s) with {events_processed} death events."
                    )
                else:
                    embed = EmbedBuilder.info(
                        title="No Files Found",
                        description=f"No new CSV files found for server `{server_id}` in the last {hours} hours."
                    )
                
                await interaction.followup.send(embed=embed, ephemeral=True)
                
            except Exception as e:
                logger.error(f"Error processing CSV files: {str(e)}")
                embed = EmbedBuilder.error(
                    title="Processing Error",
                    description=f"An error occurred while processing CSV files: {str(e)}"
                )
                await interaction.followup.send(embed=embed, ephemeral=True)
    
    @app_commands.command(name="clear_csv_cache")
    @admin_permission_decorator()
    @premium_tier_required(1)  # Require Survivor tier for CSV cache management
    async def clear_csv_cache_command(self, interaction: discord.Interaction):
        """Clear the CSV parser cache
        
        Args:
            interaction: Discord interaction
        """
        
        # Clear cache
        self.csv_parser.clear_cache()
        
        embed = EmbedBuilder.success(
            title="Cache Cleared",
            description="The CSV parser cache has been cleared."
        )
        await interaction.response.send_message(embed=embed, ephemeral=True)
    
    @app_commands.command(name="csv_status")
    @admin_permission_decorator()
    @premium_tier_required(1)  # Require Survivor tier for CSV status
    async def csv_status_command(self, interaction: discord.Interaction):
        """Show CSV processor status
        
        Args:
            interaction: Discord interaction
        """
        
        await interaction.response.defer(ephemeral=True)
        
        # Get server configs
        server_configs = await self._get_server_configs()
        
        # Create status embed
        embed = EmbedBuilder.info(
            title="CSV Processor Status",
            description="Current status of the CSV processor"
        )
        
        # Add processing status
        embed.add_field(
            name="Currently Processing",
            value="Yes" if self.is_processing else "No",
            inline=True
        )
        
        # Add configured servers
        server_list = []
        for server_id, config in server_configs.items():
            last_time = self.last_processed.get(server_id, "Never")
            if isinstance(last_time, datetime):
                last_time = last_time.strftime("%Y-%m-%d %H:%M:%S")
            
            server_list.append(f"• `{server_id}` - Last processed: {last_time}")
        
        if server_list:
            embed.add_field(
                name="Configured Servers",
                value="\n".join(server_list),
                inline=False
            )
        else:
            embed.add_field(
                name="Configured Servers",
                value="No servers configured",
                inline=False
            )
        
        await interaction.followup.send(embed=embed, ephemeral=True)

    async def _process_kill_event(self, event: Dict[str, Any]) -> bool:
        """Process a kill event and update player stats and rivalries
        
        Args:
            event: Normalized kill event dictionary
            
        Returns:
            bool: True if processed successfully, False otherwise
        """
        try:
            server_id = event.get("server_id")
            if not server_id:
                logger.warning("Kill event missing server_id, skipping")
                return False
                
            # Get kill details
            killer_id = event.get("killer_id", "")
            killer_name = event.get("killer_name", "Unknown")
            victim_id = event.get("victim_id", "")
            victim_name = event.get("victim_name", "Unknown")
            weapon = event.get("weapon", "Unknown")
            distance = event.get("distance", 0)
            timestamp = event.get("timestamp", datetime.utcnow())
            
            # Ensure timestamp is datetime
            if isinstance(timestamp, str):
                try:
                    timestamp = datetime.fromisoformat(timestamp)
                except ValueError:
                    timestamp = datetime.utcnow()
            
            # Check if this is a suicide
            is_suicide = False
            if killer_id and victim_id and killer_id == victim_id:
                is_suicide = True
            
            # Check if we have the necessary player IDs
            if not victim_id:
                logger.warning("Kill event missing victim_id, skipping")
                return False
            
            # For suicides, we only need to update the victim's stats
            if is_suicide:
                # Get victim player or create if doesn't exist
                victim = await self._get_or_create_player(server_id, victim_id, victim_name)
                
                # Update suicide count
                await victim.update_stats(self.bot.db, kills=0, deaths=0, suicides=1)
                
                return True
            
            # For regular kills, we need both killer and victim
            if not killer_id:
                logger.warning("Kill event missing killer_id for non-suicide, skipping")
                return False
            
            # Get killer and victim players, or create if they don't exist
            killer = await self._get_or_create_player(server_id, killer_id, killer_name)
            victim = await self._get_or_create_player(server_id, victim_id, victim_name)
            
            # Update kill/death stats
            await killer.update_stats(self.bot.db, kills=1, deaths=0)
            await victim.update_stats(self.bot.db, kills=0, deaths=1)
            
            # Update rivalries
            from models.rivalry import Rivalry
            await Rivalry.record_kill(server_id, killer_id, victim_id, weapon, "")
            
            # Update nemesis/prey relationships
            await killer.update_nemesis_and_prey(self.bot.db)
            await victim.update_nemesis_and_prey(self.bot.db)
            
            # Insert kill event into database
            kill_doc = {
                "server_id": server_id,
                "killer_id": killer_id,
                "killer_name": killer_name,
                "victim_id": victim_id,
                "victim_name": victim_name,
                "weapon": weapon,
                "distance": distance,
                "timestamp": timestamp,
                "is_suicide": is_suicide
            }
            
            await self.bot.db.kills.insert_one(kill_doc)
            
            return True
            
        except Exception as e:
            logger.error(f"Error processing kill event: {e}")
            return False
    
    async def _get_or_create_player(self, server_id: str, player_id: str, player_name: str):
        """Get player by ID or create if it doesn't exist
        
        Args:
            server_id: Server ID
            player_id: Player ID
            player_name: Player name
            
        Returns:
            Player object
        """
        from models.player import Player
        
        # Check if player exists
        player = await Player.get_by_player_id(self.bot.db, player_id)
        
        if not player:
            # Create new player
            player = Player(
                player_id=player_id,
                server_id=server_id,
                name=player_name,
                display_name=player_name,
                last_seen=datetime.utcnow(),
                created_at=datetime.utcnow(),
                updated_at=datetime.utcnow()
            )
            
            # Insert into database
            await self.bot.db.players.insert_one(player.__dict__)
        
        return player

async def setup(bot: commands.Bot) -> None:
    """Set up the CSV processor cog"""
    await bot.add_cog(CSVProcessorCog(bot))